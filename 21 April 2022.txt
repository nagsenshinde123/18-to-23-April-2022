Q.1) 1. Given two sorted arrays, the task is to merge them in a sorted manner.

     Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8} 
     Output: arr3[] = {1, 2, 3, 4, 4, 5, 6, 8}

      import java.util.Arrays;

      public class MegeTwoArrays {

	public static void main(String[] args) {
		int[] arr1 = { 1, 3, 4, 5};
		int[] arr2 = { 2, 4, 6, 8};
		
		mergeArrays(arr1, arr2);

	}

	private static void mergeArrays(int[] arr1, int[] arr2) {
		int k = 0;
		int[] result = new int[arr1.length+arr2.length];
		for(int i=0; i<arr1.length; i++) {
			result[k] = arr1[i];
			k++;
		}
		for(int i=0; i<arr2.length; i++) {
			result[k] = arr2[i];
			k++;
		}
		Arrays.sort(result);
		System.out.println(Arrays.toString(result));
		
	}

}



----------------------------------------------***-----------------------------------------------------

     Input: arr1[] = { 5, 8, 9}, arr2[] = {4, 7, 8} 
     Output: arr3[] = {4, 5, 7, 8, 8, 9} 

     import java.util.Arrays;

     public class MegeTwoArrays {

	public static void main(String[] args) {
		int[] arr1 = { 5, 8, 9};
		int[] arr2 = {4, 7, 8};
		
		mergeArrays(arr1, arr2);

	}

	private static void mergeArrays(int[] arr1, int[] arr2) {
		int k = 0;
		int[] result = new int[arr1.length+arr2.length];
		for(int i=0; i<arr1.length; i++) {
			result[k] = arr1[i];
			k++;
		}
		for(int i=0; i<arr2.length; i++) {
			result[k] = arr2[i];
			k++;
		}
		Arrays.sort(result);
		System.out.println(Arrays.toString(result));
		
	}

}

----------------------------------------------***-----------------------------------------------------
Q.2) In which scenario do you use linked list and arraylist?

    Linked List ----> Linked list is use for Insertion and deletion Scenario Because 
                      the time complexity is O(1);

    Array List -----> ArrayList has O(1) time complexity to access elements via the get and set methods.


----------------------------------------------***-----------------------------------------------------
Q.3) Given an array of both positive and negative integers ‘arr[]’ which are sorted. 
     The task is to sort the square of the numbers of the Array. 
     Time complexity: O(n) 
     space complexity: O(n) "

     import java.util.Arrays;

     public class SquareOfMatrix {

	public static void main(String[] args) {
		int []arr = { -4, -3, -8, -7, 5, 4, 3, 1, 0, 2 } ;
		squareofEachElement(arr);

	}

	private static void squareofEachElement(int[] arr) {
		int len = arr.length;
		for(int i=0; i<len; i++) {
			arr[i] = arr[i] * arr[i];
		}
		Arrays.sort(arr);
		System.out.println(Arrays.toString(arr));
		
	}

}



----------------------------------------------***-----------------------------------------------------